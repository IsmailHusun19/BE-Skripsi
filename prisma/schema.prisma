generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

/// Tabel Pengguna (Mahasiswa, Dosen, Admin)
model users {
  id                Int                     @id @default(autoincrement())
  nomorinduk        String                  @unique @db.VarChar(200) // Nomor induk unik untuk setiap pengguna
  nama              String                  @db.VarChar(200)         // Nama pengguna
  email             String                  @unique @db.VarChar(200) // Email pengguna
  password          String                  @db.VarChar(200)         // Password pengguna
  role              String                  @db.VarChar(50)          // Peran pengguna (Mahasiswa, Dosen, Admin)
  mataKuliahDiajarkan MataKuliah[]          @relation("MataKuliahDosen")
  mataKuliahDiikuti  MataKuliahMahasiswa[]  
  progressSubMateri  MahasiswaProgressSubMateri[]
  tanggalDaftar     DateTime                 @default(now()) // Waktu pengguna mendaftar
}

/// Tabel Mata Kuliah
model MataKuliah {
  id            Int                        @id @default(autoincrement())
  nama          String                     
  dosen         users[]                    @relation("MataKuliahDosen")
  mahasiswa     MataKuliahMahasiswa[]      
  materi        Materi[]                   
  kodeGabung    String                     @unique @db.VarChar(100)
  tanggalDibuat DateTime                   @default(now()) // Waktu saat dosen membuat mata kuliah
}

/// Tabel relasi antara Mahasiswa dan Mata Kuliah
model MataKuliahMahasiswa {
  id           Int         @id @default(autoincrement()) 
  mahasiswa    users       @relation(fields: [mahasiswaId], references: [id])
  mahasiswaId  Int         
  mataKuliah   MataKuliah  @relation(fields: [mataKuliahId], references: [id])
  mataKuliahId Int         
  tanggalGabung DateTime   @default(now()) // Waktu mahasiswa bergabung
}

/// Tabel Materi
model Materi {
  id             Int           @id @default(autoincrement()) // Primary Key
  judul          String        // Judul materi
  mataKuliah     MataKuliah    @relation(fields: [mataKuliahId], references: [id]) // Relasi dengan mata kuliah
  mataKuliahId   Int
  tanggalDibuat  DateTime      @default(now()) // Tanggal pembuatan materi
  subMateri      SubMateri[]   // Relasi dengan tabel SubMateri
}

/// Tabel SubMateri dengan urutan
model SubMateri {
  id             Int           @id @default(autoincrement()) // Primary Key
  judul          String        // Judul sub-materi
  type           String        // "materi" atau "quiz"
  isi            String? @db.LongText // Menggunakan LONGTEXT untuk teks panjang
  materiId       Int
  materi         Materi        @relation(fields: [materiId], references: [id])
  fileMateri     FileMateri[]  // Relasi ke file (opsional)
  GambarMateri   GambarMateri[]  // Relasi ke file (opsional)
  tanggalDibuat  DateTime      @default(now()) // Tanggal pembuatan sub-materi
  progressSubMateri MahasiswaProgressSubMateri[] // Relasi untuk mencatat progres mahasiswa dalam sub-materi

  // Kolom untuk Kuis
  pertanyaan    Json?  // Bisa NULL jika tidak diisi
  pilihan       Json   // Wajib diisi
  jawabanBenar  Json?  // Bisa NULL jika tidak diisi   // Jawaban benar (misalnya: "A", "B", "C", "D"), null jika bukan kuis
}


/// Tabel File
model FileMateri {
  id             Int        @id @default(autoincrement()) // Primary Key
  url            String     // URL lokasi file
  subMateri      SubMateri  @relation(fields: [subMateriId], references: [id], onDelete: Cascade) // Relasi ke SubMateri 
  subMateriId    Int        // Foreign Key ke SubMateri
}

model GambarMateri {
  id             Int        @id @default(autoincrement()) // Primary Key
  url            String     @db.Text
  subMateri      SubMateri?  @relation(fields: [subMateriId], references: [id], onDelete: Cascade) // Relasi ke SubMateri
  createdAt      DateTime   @default(now()) // Waktu saat data dibuat
  subMateriId    Int?        // Foreign Key ke SubMateri
}

/// Tabel Progres Mahasiswa dalam SubMateri
model MahasiswaProgressSubMateri {
  id             Int           @id @default(autoincrement()) // Primary Key
  mahasiswa      users         @relation(fields: [mahasiswaId], references: [id]) // Relasi dengan mahasiswa
  mahasiswaId    Int           // Foreign Key ke mahasiswa
  subMateri      SubMateri     @relation(fields: [subMateriId], references: [id]) // Relasi dengan sub-materi
  subMateriId    Int           // Foreign Key ke SubMateri
  selesai        Boolean       @default(false) // Apakah sub-materi ini sudah diselesaikan oleh mahasiswa
  tanggalAkses   DateTime      @default(now()) // Tanggal akses sub-materi
}
